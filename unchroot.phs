<?php

  function allow_concurrency($timeout_or_lockfilepath) {
    $result = false;

    if (is_int($timeout_or_lockfilepath)) {
      set_time_limit(0);
      $result = true;
    } else {
      if (is_string($timeout_or_lockfilepath)) {
        if (is_file($timeout_or_lockfilepath)) {
          $content = file_get_contents($timeout_or_lockfilepath);
          if ((false !== $content) && (!empty($content))) {
            if (posix_getpid() == $content) {
              $result = unlink($timeout_or_lockfilepath);
            }
          }
        }
      }
    }

    return $result;
  }

  function disallow_concurrency($timeout_or_lockfilepath) {
    $result = false;

    if (is_int($timeout_or_lockfilepath) && (0 < $timeout_or_lockfilepath)) {
      set_time_limit($timeout_or_lockfilepath);
      $result = true;
    } else {
      if (is_string($timeout_or_lockfilepath)) {
        // we may run endlessly
        set_time_limit(0);

        // we're able to aquire a lock if the file does not exist
        $writeLockfile = (!is_file($timeout_or_lockfilepath));

        if (!$writeLockfile) {
          $content = file_get_contents($timeout_or_lockfilepath);

          // we're able to aquire a lock if the file is empty...
          if ((false !== $content) && (!empty($content))) {
            // ...and we're the owner of the lock file...
            if (posix_getpid() == $content) {
              $result        = true;
              $writeLockfile = false;
            } else {
              // ...or the owner of the lock file does not exist anymore...
              if (!file_exists("/proc/" . $content)) {
                // ...and we're able to delete the orphaned lock file
                $writeLockfile = unlink($timeout_or_lockfilepath);
              }
            }
          } else {
            // ...and we're able to delete the empty lock file
            $writeLockfile = unlink($timeout_or_lockfilepath);
          }
        }

        if ($writeLockfile) {
          $result = (false !== file_put_contents($timeout_or_lockfilepath, posix_getpid()));
        }
      }
    }

    return $result;
  }

  // calls expand_path() and always returns the result as an array
  function expand_path_list($path) {
    $temp = expand_path($path);

    if (is_string($temp)) {
      return array($temp);
    } else {
      return $temp;
    }
  }

  // calls expand_path() but only returns the first result
  function expand_path_single($path) {
    $temp = expand_path($path);

    if (is_array($temp)) {
      return $temp[0];
    } else {
      return $temp;
    }
  }

  // takes a path and tries to expand it wherever a * occurs
  function expand_path($path) {
    $slash     = '/';
    $previous  = '..';
    $multi     = '*';
    $empty     = '';
    $current   = '.';
    $backslash = '\\';

    $result = false;

    // only do deeper analysis if it is necessary
    if (false !== stripos($path, $multi)) {
      // prepare $path as array
      $path = explode($slash, str_replace($backslash, $slash, $path));
      if (0 < count($path)) {
        // prepare $cwd as empty array
        $cwd = array();
        switch ($path[0]) {
          case $empty:
            array_push($cwd, $slash);
            break;

          case $current:
            array_push($cwd, $current.$slash);
            break;

          case $previous:
            array_push($cwd, $previous.$slash);
            break;

          default:
            array_push($cwd, $current.$slash);
        }

        // proceed depending on $cwd preparation
        for ($index = count($cwd); $index < count($path); $index++) {
          if (false !== stripos($path[$index], $multi)) {
            // handle complex path chunk
            $multipieces = explode($multi, $path[$index]);

            // $newcwd will become the new $cwd
            $newcwd = array();
            foreach ($cwd as $key => $value) {
              $cwdhandle = opendir($value);
              if (false !== $cwdhandle) {
                $cwdname = false;
                do {
                  $cwdname = readdir($cwdhandle);
                  if (false !== $cwdname) {
                    if (($current !== $cwdname) && ($previous !== $cwdname)) {
                      $cwdmatches = true;

                      // check if the current $cwdname matches
                      // the given $multipieces structure
                      $lastpos = 0;
                      foreach ($multipieces as $mpkey => $mpvalue) {
                        if (!empty($mpvalue)) {
                          $newpos = strpos($cwdname, $mpvalue);
                          if ((false !== $newpos) &&
                              ($lastpos <= $newpos) &&
                              ((0 < $mpkey) || (0 === $newpos)) &&
                              ((count($multipieces)-1 > $mpkey) || (strlen($cwdname)-strlen($mpvalue) === $newpos))) {
                            $lastpos = $newpos + strlen($mpvalue);
                          } else {
                            $cwdmatches = false;
                            break;
                          }
                        }
                      }

                      if ($cwdmatches) {
                        if (is_dir($value.$cwdname)) {
                          array_push($newcwd, $value.$cwdname.$slash);
                        } else {
                          // only add files if we're at the last $path element
                          if (count($path)-1 === $index) {
                            if (is_file($value.$cwdname)) {
                              array_push($newcwd, $value.$cwdname);
                            }
                          }
                        }
                      }
                    }
                  }
                } while (false !== $cwdname);

                closedir($cwdhandle);
              }
            }
            $cwd = $newcwd;
          } else {
            // handle simple path chunk
            foreach ($cwd as $key => $value) {
              // append slashes if we're not at the last $path element
              if (count($path)-1 > $index) {
                $cwd[$key] = $value.$path[$index].$slash;
              } else {
                $cwd[$key] = $value.$path[$index];
              }
            }
          }

          // if there's no $cwd entry left then
          // we can exit because there is no existing
          // path left fitting to the template
          if (0 >= count($cwd)) {
            break;
          }
        }

        if (0 < count($cwd)) {
          if (1 === count($cwd)) {
            $result = $cwd[0];
          } else {
            $result = $cwd;
          }
        }
      }
    } else {
      // or else just return the path
      $result = $path;
    }

    return $result;
  }

  // takes a string and replaces all placeholders with their corresponding values
  function replace_placeholders($path, $placeholders) {
    $phbefore  = "{%";
    $phafter   = "}";

    $result = false;

    // replace placeholders
    if (is_string($path) && is_array($placeholders)) {
      $result = $path;

      foreach ($placeholders as $key => $value) {
        $result = str_ireplace($phbefore.$key.$phafter, $value, $result);
      }
    }

    return $result;
  }
  
  function chroot_normalize_path($path, $trailing_slash = true) {
    $slash     = '/';
    $previous  = '..';
    $empty     = '';
    $current   = '.';
    $backslash = '\\';

    // preset $result
    $result = false;

    // prepare $path as array
    $path = explode($slash, str_replace($backslash, $slash, $path));
    if (0 < count($path)) {
      // prepare $cwd as empty array
      $cwd = array();
      switch ($path[0]) {
        case $empty:
          array_push($cwd, $empty);
          break;

        case $current:
          $cwd = explode($slash, str_replace($backslash, $slash, getcwd()));
          break;

        case $previous:
          $cwd = explode($slash, str_replace($backslash, $slash, getcwd()));
          array_pop($cwd);
          break;

        default:
          $cwd = explode($slash, str_replace($backslash, $slash, getcwd()));
          array_push($cwd, $path[0]);
      }

      // normalize $path
      for ($index = 1; $index < count($path); $index++) {
        switch ($path[$index]) {
          case $empty:
            break;

          case $current:
            break;

          case $previous:
            array_pop($cwd);
            break;

          default:
            array_push($cwd, $path[$index]);
        }
      }

      if ($trailing_slash) {
        if ((1 < count($path)) && ($empty === $path[count($path)-1])) {
          array_push($cwd, $empty);
        }
      }

      $result = implode($slash, $cwd);
    }

    return $result;
  }

  function unroot_get_gid($group) {
    $result = -1;

    if (is_int($group)) {
      $result = $group;
    } else {
      $temp = posix_getgrnam($group);
      if (false !== $temp) {
        $result = $temp["gid"];
      }
    }

    return $result;
  }

  function unroot_get_uid($user) {
    $result = -1;

    if (is_int($user)) {
      $result = $user;
    } else {
      $temp = posix_getpwnam($user);
      if (false !== $temp) {
        $result = $temp["uid"];
      }
    }

    return $result;
  }

  function force_chroot($path) {
    $result = false;

    $path = chroot_normalize_path($path);
    if ((false !== $path) && (is_dir($path))) {
      $result = chroot($path);
    }

    if (false === $result) {
      exit("force chroot failed: path=$path");
    }

    return $result;
  }

  function force_unroot($user, $group) {
    $result = (0 < posix_getuid());

    if (!$result) {
      $groupid = unroot_get_gid($group);
      $userid  = unroot_get_uid($user);

      if ((0 < $groupid) && (0 < $userid)) {
        $result = posix_setgid($groupid);
        if ($result) {
          $result = posix_setuid($userid);
        }
      }
    }

    if (!$result) {
      exit("force unroot failed: user=$user group=$group");
    }

    return $result;
  }

  function force_chroot_unroot($path, $user, $group) {
    $gid = unroot_get_gid($group);
    $uid = unroot_get_uid($user);

    $result = force_chroot($path);
    if ($result) {
      $result = force_unroot($uid, $gid);
    }

    return $result;
  }

?>
